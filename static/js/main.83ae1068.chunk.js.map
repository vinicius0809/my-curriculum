{"version":3,"sources":["logo.svg","components/PersonalData.js","components/ProfessionalData.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PersonalData","birthDate","Date","Math","floor","getTime","getAge","ProfessionalData","startDate","date","day","getDate","originalMonth","getMonth","getFullYear","formatDate","difference","years","toFixed","months","days","yearsString","monthsString","daysString","finalString","replace","untilToday","App","className","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,kC,8KCgB5BC,MAdf,WACI,IACIC,EAAY,IAAIC,KAAK,cAIzB,OACI,6BACI,2BAAG,oCAAH,IAPG,4CAQH,2BAAG,qCAAH,IALO,SAAAD,GAAS,OAAIE,KAAKC,OAAO,IAAIF,KAAS,IAAIA,KAAKD,GAAWI,WAAa,UAK5DC,CAAOL,GAAzB,YCkDGM,MA3Df,WACI,IACIC,EAAY,IAAIN,KAAK,aAIzB,OACI,6BACI,2BAAG,6CAAH,IAPU,6BAQV,2BAAG,qCAAH,IANG,yBAMH,MALK,aAML,2BAAG,iDAAH,IAKZ,SAAoBO,GAChB,IAAIC,EAAMD,EAAKE,UAAY,GAAK,IAAMF,EAAKE,UAAYF,EAAKE,UACxDC,EAAgBH,EAAKI,WAAa,EAGtC,OAAOH,EAAM,KAFDE,EAAgB,GAAK,IAAMA,EAAgBA,GAE5B,IAAMH,EAAKK,cAVHC,CAAWP,GAAtC,MAaZ,SAAoBC,GAChB,IACIO,IADQ,IAAId,MACSG,UAAYI,EAAKJ,WAAxB,MAEdY,GAASD,EAAa,KAAKE,QAAQ,GACnCC,GAAWH,EAAa,IAAO,IAAIE,QAAQ,GAC3CE,GAASJ,EAAa,IAAO,IAAIE,QAAQ,GAEzCG,EAAc,MACdC,EAAe,MACfC,EAAa,MACbC,EAAc,GAEfP,EAAQ,IACPI,GAAe,KAEhBF,EAAS,IACRG,GAAgB,MAEjBF,EAAO,IACNG,GAAc,KAGfN,EAAQ,IACPO,GAAe,OAASH,GAEzBF,EAAS,IACRK,GAAe,SAAWF,GAE3BF,EAAO,IACNI,GAAe,SAAWD,GAG9B,OAAOC,EAAYC,QAAQ,MAAOR,GAAOQ,QAAQ,MAAON,GAAQM,QAAQ,MAAOL,GA9ClBM,CAAWlB,MCiB7DmB,MAvBf,WACE,OACE,yBAAKC,UAAU,OACf,kBAAC,EAAD,MACA,kBAAC,EAAD,MACE,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,kBCJYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.83ae1068.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\r\n\r\nfunction PersonalData() {\r\n    let name = \"Flávio Vinícius Martins dos Santos\";\r\n    let birthDate = new Date('1995-09-08');\r\n\r\n    const getAge = birthDate => Math.floor((new Date() - new Date(birthDate).getTime()) / 3.15576e+10)\r\n\r\n    return(\r\n        <div>\r\n            <p><b>Nome:</b> {name}</p>\r\n            <p><b>Idade:</b> {getAge(birthDate)} anos.</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PersonalData;","import React from 'react';\r\n\r\nfunction ProfessionalData() {\r\n    let companyName = \"Tata Consultancy Services\";\r\n    let startDate = new Date('2018-8-23');\r\n    let role = \"Analista Desenvolvedor\";\r\n    let degree = \"Júnior\";\r\n\r\n    return(\r\n        <div>\r\n            <p><b>Empresa atual:</b> {companyName}</p>\r\n            <p><b>Cargo:</b> {role} - {degree}</p>\r\n            <p><b>Data de início:</b> {formatDate(startDate)} - {untilToday(startDate)}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction formatDate(date){\r\n    let day = date.getDate() < 10 ? \"0\" + date.getDate() : date.getDate();\r\n    let originalMonth = date.getMonth() + 1;\r\n    let month = originalMonth < 10 ? \"0\" + originalMonth : originalMonth;\r\n\r\n    return day + \"/\" + month + \"/\" + date.getFullYear();\r\n}\r\n\r\nfunction untilToday(date){\r\n    let today = new Date();\r\n    let difference = ((today.getTime() - date.getTime()) / (1000 * 3600 * 24)); \r\n\r\n    let years = (difference / 365).toFixed(0);\r\n    let months = ((difference % 365) / 30).toFixed(0);\r\n    let days = ((difference % 365) % 30).toFixed(0);\r\n\r\n    let yearsString = \"ano\";\r\n    let monthsString = \"mes\";\r\n    let daysString = \"dia\";\r\n    let finalString = \"\";\r\n\r\n    if(years > 1){\r\n        yearsString += \"s\";\r\n    }\r\n    if(months > 1){\r\n        monthsString += \"es\";\r\n    }\r\n    if(days > 1){\r\n        daysString += \"s\";\r\n    }\r\n    \r\n    if(years > 0){\r\n        finalString += \"{0} \" + yearsString;\r\n    }\r\n    if(months > 0){\r\n        finalString += \", {1} \" + monthsString; \r\n    }\r\n    if(days > 0){\r\n        finalString += \", {2} \" + daysString; \r\n    }\r\n\r\n    return finalString.replace(\"{0}\", years).replace(\"{1}\", months).replace(\"{2}\", days);\r\n}\r\n\r\nexport default ProfessionalData;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport PersonalData from './components/PersonalData'\nimport ProfessionalData from './components/ProfessionalData'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <PersonalData/>\n    <ProfessionalData/>\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}